name: Update Stock Data

on:
  schedule:
    # Run daily at midnight UTC to reduce failures
    - cron: '0 0 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  update-stock-data:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        working-directory: ./backend
        run: npm install
      
      - name: Run update script
        working-directory: ./backend
        run: |
          # Create a temporary .env file with secrets
          echo "NODE_ENV=production" > .env
          echo "SUPABASE_URL=https://ydakwyplcqoshxcdllah.supabase.co" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}" >> .env
          echo "USE_FALLBACK_DATA=true" >> .env
          echo "GITHUB_ACTIONS=true" >> .env
          
          # Install Supabase JS client
          npm install @supabase/supabase-js
          
          # Attempt to run the script with retries
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts to update stock data"
            if node scripts/updateStockData.js; then
              echo "Stock data update successful!"
              break
            else
              echo "Attempt $attempt failed."
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
              attempt=$((attempt+1))
            fi
          done
          
          # Even if Supabase connection fails, we'll still commit any generated files
          # Clean up
          rm .env
        env:
          # Also provide as environment variables for redundancy
          SUPABASE_URL: https://ydakwyplcqoshxcdllah.supabase.co
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }} 
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
          NODE_ENV: production
          USE_FALLBACK_DATA: true
          GITHUB_ACTIONS: true
      
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          
          # Check if data directory exists and has files
          if [ -d "backend/public/data" ] && [ "$(ls -A backend/public/data)" ]; then
            git add backend/public/data/
            
            # Only commit if there are changes
            if ! git diff --staged --quiet; then
              git commit -m "Update stock data [skip ci]"
              
              # Push to GitHub (using GITHUB_TOKEN for authentication)
              git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main || echo "Warning: Failed to push. This is not critical."
            else
              echo "No changes to commit"
            fi
          else
            echo "No data directory or empty data directory, skipping commit"
          fi 